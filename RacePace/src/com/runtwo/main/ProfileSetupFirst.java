package com.runtwo.main;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.HashMap;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.runtwo.constants.GlobalConstants;
import com.runtwo.utils.ImageDownloader;
import com.runtwo.utils.ImageFileManipulation;
import com.runtwo.utils.Utils;
import com.runtwo.webservice.WebServiceHandler;

public class ProfileSetupFirst extends Activity implements OnClickListener /* Fragment */{

	EditText eFname, eLname, eEmail, ePass, eCountry, eCity, eAddress, eZip,
	eRunningTeam, eFavQuote, eDOB, eGender, eWeight, eHeight, eTsize,
	eShoeSize;

	TextView tSave, tCancel;
	ProgressDialog mProgressDialog;

	ImageView profileImage, headerImage;
	Globals global;

	String dialoglist[] = { "Camera", "Gallery", "Cancel" };
	AlertDialog dialog;

	private String strBase64 = "";
	private String imageName = "";
	
	private String strBase64TimeLine = "";
	private String timeLineImageName = "";

	// String akshi =
	// "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OeFe0t/sfao1+D4Gwar3Vm+ur//hrbdaFRVHXdAVl5Vd/d1vf+XbNww/+9LKIUNJzunFnrbW3du3ZoIsicf9dPr9t14eUVF02x8fmTZt2scVSOlpc08dd8KMBx544O677164dOnFF1/MixLMyfcbf2Sn0Wde9GjdKLL8DPZOOp1++umnTznllNGjRx/55z/j1xz85AknzJw2ftT7b7yQexNK/Uxq38ZVfncnIUR6/vuLFx4zqPbBh/523HHHfQKqUQCIxWLXX3/9L37xi6eeeuq5555TqhCb5H8EYpgexXsVVqvv3Llz69atF1xwQeER6SXl8dOzAgEh34tq2/YXLrxg9ztvpFoagVIpg/2b13ntHcAoEPXBW6+PqS67+49/GDhw4KcTyoRccMEFN91008MPP7x8+fIow5H3J+DocoIeFboXAtiYE7B06dJBgwaNGzcueqsjfjLHCtCfnDoHPwgwa8bMyhjbuuJ1yln7vl3dTfuRE0rpga2beabt9l//ctCAgZ/2XczFhRdeePnll//+97/fv39/1Kt81KkPRyUcnXf6jdslA8/r6e56f8Xyk2edyDMZmcl82g1oKquA6A/D9o5UcSljs8aPf3PZa964qalNa510mhDipbq71rz1g+98Y/zAwYVvd3gx/BHvGV189eKLVy9e/Phf//rtb38bbRttK1f4cvScADgqSvggdGgYgu+DZTU3N+9sbfv+Kaf0unkhbo8posqJIJL7UykklFDysYjqB920qbNP+cfiX2zeslah1rEYIeSDtauGjhx2wdXX8M/ndZeXlV13ww033HDD6RddNG7cOC2EsG36ibvvPikDPj/1oRCGQUql1J49e2zbPtz2L7SjESEHY0+g1ccX92SW1su2zjCuwmkV1rwxsUGV7qHSP6c2yKGSc/TosTbRHY31xZVVhBCvp6d99+Ybb/2vQ2MeHw9rfkSXcObMmaNGjXr22WdHjBhhOqI/FoDpf4EBEQqJ0VRKqb1791ZVVZV95NnK+ZMAK9vlD9dmlm/rDHZvh+YG0O6jbp8/VxXdclb1OZP70PxhIAW/F66qqsry4iK/uxsqqwghbft3DairnTNnzqFPSI/AiUPF2xFpatv2hRde+Ktf/aqxsbFv375KKVOLfxSd4aPgCReGP40JdODAgZqaGitf9PohUgSB4tYMfH29v3rdVnjmt7B+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K685dtp0APB9v6uro62trbmpsbujUwFWlFcOHT6s34BBrusiIqU8iiARxn3ff+2lhQ8/9DcZKwfQ8fod07zUTITxrlvlxmMU7FAFqe6UVG2EbEVYAbjCsrcpaVnWvHPOv+DCi/tUV2dSqY0bN2zc8H5LU4OvNAGI2Q6zhOl6tJjww3DFsjd37q4noqQ85iuCF3/x0uuv/1ZRUSIHhkJQI4ms23feXnXLz28eMmTIgQMHbr31VlMIEsEkSylfffXVe++995Zbbjn11FPz0GLikELroLUlqmo2uiiTyfzoRz8sLi657rqv2rYthGU+IKWUoW5uOXDrrbcOHjzk+uu/8cYbix999NEf33jj4MGDGWOcW0bBKIVBEHiBv/D5F/777w+ffPJJxcUlzc0HlixfkU1lRowao1SYSqWklIQwYTmmnzvTk/L99KBBQ84465xho0ayHA4Ko5Q01h947rknVry1SgnH7Wo9O9NzEecjh4+InTqXjB9HqquRUd2dwq1bg9ffUO+8oxgNbXt/e8eLWj+JWE+g/8CB046bsWP7B/v27UmWlJeXVzqOY3GRy7GoUIcyUIHv+0HoyxB939cyCIKAEHLFVVddddVVrutSygnVgAS0khq1lEEQ3H333X/724M/+9nP588/2wj7aNBmEIS+7z/00EPr16/77W/vqqmpiTosD2oDcwIMuwzm4fbt26+77rrvfOc7M2fOjArkTZIrDMMwDN99992bb775yiuvXLhw4fTp06++9hrbck3frGF+oHQYhm8vX/YfN/xbJpOprKyUWtnCSiSLS0tLS8orykrLi0pK3XicCQuRBGGYzXrdqUxzY8OWjetSHY2XXP7lmSfPIYR0trasWLb05Vde6gw4Ebxy35afq+AMy3EvuZhe+xVq2s1yGUdGCIGeHm/ZEtZ/AFb26fz+d3veXLKG098ofAfRst3BI8eOGX9Mn+raokQsHo+5rus6lmVZtkUFFZZlMUaQaabzxT+EECU55xMmTEgkEgcbNIhGTWToA8CW7dv+6+c//8Ut/9W/f3+ghBFa6BV5nldfX3/DDTecc8451113nRDCtu3CHj8O+YqS6GMffPABY2zo0KGcc8vKuSKEEA0oQhGG4bHHTTvzzDPvuuuu2tra+fPnFyWSnHPGLRMf11oLxPZMes2aNSefMqeurq68vLKssiKZTDq2ywTX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0tJSg/tGCAmCYMHT/9SAc+fOra6uHjBgwMECEARNCdUIhABF1OzgvCNGQXNKcxOYTOEtIgpAjSKXKw9laXHJmPETVq/f6GXSJB6jlFI0ns8RfJReDo3Zka8sWkLtxCmz57iuawvLFPoIi0fwV9HBMu/Oc+F+akAwCWojfJARCgQJaqUWL158880379ix4+c///kVV1yR24W+H4bhvn37du7ciYg//vGPzz333KlTpwZBsGjRokWLFl1++eVDhw6llOfGSuSdA9rLZyOElJSUDBgwYNWqVeamRkp4nuf7fnd39+9+97tFixaZw6W1jsVip55+2qpVq84777w77rhj7969uf1otmc+m0sQCFVIo2g6oQgFkV3KCXBCBWWMMcoY45RbueSRlDKQuQIADQWleXlTOLLE8JDCDvR9uXP3nrr+AxKxuLmV4AfRVs2IjYNGu1F1BpSUYg4btvAEIBo9/NRTT5WUlDz88MNXX321Sf+aVJXneWvWrEmn05dccslxxx33/PPP/+hHP7rppps2bNhw7bXXnnjiiYVY05FhyXsxwIBuT5069amnnmpoaOjbt6/WWkpNCDIm3n135YIFC4JAzps3zxxgznlFRcWtt9569913/+Y3v3nooYduuummCy64IKr7IECQEqIBEBlBoFSjRIlRSUhUXYGolBkxBmDwuSlg/d49A/vWAoCWSgt9sDcvarMHOHyOWBRdj8fd3Y0HEJFRQhlBMLBepsqCmdRuPsllQMEpYYygsfEOubO5eSKZvOOOOxhjjuNESRSTSUylUq+++urAgQONNXjsscdmMhnLsqqrq0tKSvKjrqxeqJdcdXQYowl9j3oeSaVIKjVx8KBXABc/9+wFF1wYMsq5AMBUKv3g735Xm0hsfuetjW+tGD16jLYsITjn3KHs+9deM3fatDffXFzKmGxvL+wrLSy4k4AglR+G5rmlCsMgKtAMlFIYhkRKKkOW9TavXt3ywZarTr1ad/fIIGTZgNocGQPKZIRoSQ7OPTqY1wtU6PvS948ZOGjZomXd+/eV9OtHQh+yAi1Lcy459zjnnErBQs4tJqQQQghdQKDCsGN0rBHRBkBEmckYfJIgCDzP9z1vy7q1O9asPuecc5OIHJE7jlVUJISwhHCUcqV0gkBQShGplOh5klJKKedlZabHSAeB8jxhO8J2yix71llnP/7kk/3H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";

	// View rootView;

	/*
	 * @Override public View onCreateView(LayoutInflater inflater, ViewGroup
	 * container,Bundle savedInstanceState) { //container =
	 * (LinearLayout)inflater.inflate(R.layout.profile_setup_first,null);
	 * rootView = inflater.inflate(R.layout.profile_setup_first,
	 * container,false);
	 * 
	 * getProfileDetails(); editProfile();
	 * 
	 * return rootView; }
	 */  

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.profile_setup_first);

		global = (Globals) this.getApplicationContext();

		initializeUI();
		getProfileDetails();
	}

	private void getProfileDetails() {
		String fName = "";
		String lName = "";

		Globals global = (Globals) this.getApplicationContext();

		HashMap<String, String> userDetails = global.getUserData();
		Log.v("userDetails", "" + userDetails);

		if (userDetails.size() != 0) {

			String userName = userDetails.get(GlobalConstants.USERNAME);
			Log.v("userName", userName);

			String profilePic = userDetails.get(GlobalConstants.PROFILE_IMG);
			if (profilePic != null) {
				Log.v("profilePic", profilePic);
				ImageDownloader imgDownload = ImageDownloader.getInstance();
				imgDownload.download(profilePic, profileImage, this);
				// eCountry.setText(country);
			}

			String headerPic = userDetails.get(GlobalConstants.TIMELINE_PIC);
			if (headerPic != null) {
				Log.v("headerPic", headerPic);
				ImageDownloader imgDownload = ImageDownloader.getInstance();
				imgDownload.download(headerPic, headerImage, this);
				// eCountry.setText(country);
			} else {
				headerImage.setImageResource(R.drawable.cover_img);
			}

			// String password = userDetails.get(GlobalConstants.PASSWORD);
			// Log.v("password", password);

			String[] parts = userName.split(" ");
			fName = parts[0];
			lName = parts[1];

			eFname.setText(fName);
			eLname.setText(lName);
			eEmail.setText(userDetails.get(GlobalConstants.EMAIL));
			// ePass.setText(password);

			String country = userDetails.get(GlobalConstants.STATE);
			if (country != null) {
				Log.v("country", country);
				eCountry.setText(country);
			}

			String city = userDetails.get(GlobalConstants.CITY);
			if (city != null) {
				Log.v("city", city);
				eCity.setText(city);
			}

			String address = userDetails.get(GlobalConstants.ADDRESS);
			if (address != null) {
				Log.v("address", address);
				eAddress.setText(address);
			}

			String zipCode = userDetails.get(GlobalConstants.ZIP_CODE);
			if (zipCode != null) {
				Log.v("zipCode", zipCode);
				eZip.setText(zipCode);
			}

			String runningTeam = userDetails.get(GlobalConstants.RUNNING_TEAM);
			if (runningTeam != null) {
				Log.v("runningTeam", runningTeam);
				eRunningTeam.setText(runningTeam);
			}

			String favQ = userDetails.get(GlobalConstants.FAV_DIST);
			if (favQ != null) {
				Log.v("favQ", favQ);
				eFavQuote.setText(favQ);
			}

			String dob = userDetails.get(GlobalConstants.DOB);
			if (dob != null) {
				Log.v("dob", dob);
				eDOB.setText(dob);
			}

			String gender = userDetails.get(GlobalConstants.GENDER);
			if (gender != null) {
				Log.v("gender", gender);
				eGender.setText(gender);
			}

			String weight = userDetails.get(GlobalConstants.WEIGHT);
			if (weight != null) {
				Log.v("weight", weight);
				eWeight.setText(weight);
			}

			String height = userDetails.get(GlobalConstants.HEIGHT);
			if (height != null) {
				Log.v("height", height);
				eHeight.setText(height);
			}

			String tSize = userDetails.get(GlobalConstants.TSHIRT_SIZE);
			if (tSize != null) {
				Log.v("tSize", tSize);
				eTsize.setText(tSize);
			}

			String shoeSize = userDetails.get(GlobalConstants.SHOE_SIZE);
			if (shoeSize != null) {
				Log.v("shoeSize", shoeSize);
				eShoeSize.setText(shoeSize);
			}

			/*
			 * String password = userDetails.get(GlobalConstants.PASSWORD_SAVE);
			 * Log.v("password", password); if(password != null) {
			 * ((EditText)rootView.findViewById(R.id.pass)).setText(password); }
			 */
		}
	}

	public JSONObject saveProfile() {

		String username = (eFname.getText().toString()) + " "
				+ (eLname.getText().toString());
		JSONObject obj = new JSONObject();

		try {
			obj.accumulate(GlobalConstants.ACCESS_TOKEN,
					"" + global.getAccessToken());
			obj.accumulate(GlobalConstants.USERNAME, "" + username);
			obj.accumulate(GlobalConstants.PASSWORD,
					"" + (ePass.getText().toString()));
			// obj.accumulate(GlobalConstants.EMAIL,""+(eEmail.getText().toString()));

			obj.accumulate("dob", (eDOB.getText().toString()));
			obj.accumulate("gender", (eGender.getText().toString()));
			obj.accumulate("weight", (eWeight.getText().toString()));
			obj.accumulate("height", (eHeight.getText().toString()));
			obj.accumulate("tshirt_size", (eTsize.getText().toString()));
			obj.accumulate("shoes_size", (eShoeSize.getText().toString()));
			obj.accumulate("goals", "");
			obj.accumulate("motto", "");
			obj.accumulate("img_name", imageName);

			obj.accumulate("profile_image", strBase64);

			obj.accumulate("running_team", (eRunningTeam.getText().toString()));
			obj.accumulate("fav_shoe", (eFavQuote.getText().toString()));
			obj.accumulate("fav_distance", "");
			obj.accumulate("city", (eCity.getText().toString()));
			obj.accumulate("state", (eCountry.getText().toString()));
			obj.accumulate("zip_code", (eZip.getText().toString()));
			obj.accumulate("phone_num", "");
			obj.accumulate("address", (eAddress.getText().toString()));
			obj.accumulate("timeline_image", strBase64TimeLine);
			obj.accumulate("timeline_name", timeLineImageName);

		} catch (JSONException j) {
			j.printStackTrace();
		}
		return obj;
	}

	private void initializeUI() {

		eFname = (EditText) findViewById(R.id.first_name);
		eLname = (EditText) findViewById(R.id.last_name);
		eEmail = (EditText) findViewById(R.id.email_address);
		ePass = (EditText) findViewById(R.id.pass);
		eCountry = (EditText) findViewById(R.id.country_name);
		eCity = (EditText) findViewById(R.id.city_name);
		eAddress = (EditText) findViewById(R.id.address);
		eZip = (EditText) findViewById(R.id.zip_code);
		eRunningTeam = (EditText) findViewById(R.id.running_team);
		eFavQuote = (EditText) findViewById(R.id.fav_quote);
		eDOB = (EditText) findViewById(R.id.dob);
		eGender = (EditText) findViewById(R.id.sex);
		eWeight = (EditText) findViewById(R.id.weight);
		eHeight = (EditText) findViewById(R.id.height);
		eTsize = (EditText) findViewById(R.id.tShirt_size);
		eShoeSize = (EditText) findViewById(R.id.shoe_size);

		tSave = (TextView) findViewById(R.id.save);
		tCancel = (TextView) findViewById(R.id.cancel);

		profileImage = (ImageView) findViewById(R.id.profile_pic);
		headerImage = (ImageView) findViewById(R.id.header_pic);

		tCancel.setOnClickListener(this);
		tSave.setOnClickListener(this);

		profileImage.setOnClickListener(this);
		headerImage.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {

		case R.id.cancel:
			finish();
			break;

		case R.id.save:
			// saveProfile();
			new CallService().execute();
			break;

		case R.id.profile_pic:
			createPictureDialog("profilePic");
			break;

		case R.id.header_pic:
			createPictureDialog("timeLinePic");
			break;
		}
	}

	private class CallService extends AsyncTask<String, Integer, String> {

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			new ProgressDialog(ProfileSetupFirst.this);
			mProgressDialog = ProgressDialog.show(ProfileSetupFirst.this, "","Loading...");
		}

		@Override
		protected String doInBackground(String... params) {
			String result = "true";
			try {
				JSONObject jObj = saveProfile();
				result = WebServiceHandler.updateUserDetails(ProfileSetupFirst.this, jObj);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			super.onPostExecute(result);
			mProgressDialog.dismiss();

			if (result.equalsIgnoreCase("true")) {
				Toast.makeText(ProfileSetupFirst.this,
						"Profile Updated Succesfully", Toast.LENGTH_SHORT)
						.show();
				finish();
			} else if (result.equalsIgnoreCase("false")) {
				Toast.makeText(ProfileSetupFirst.this,
						"" + global.getMessageOfResponse(), Toast.LENGTH_SHORT)
						.show();
			} else {
				Toast.makeText(ProfileSetupFirst.this,
						"Error Connecting to server.", Toast.LENGTH_SHORT)
						.show();
			}
		}

	}

	public void createPictureDialog(String whichAction) {
		
		if(whichAction.equalsIgnoreCase("profilePic")) {
			AlertDialog.Builder builder = new AlertDialog.Builder(this);

			builder.setTitle("Choose Action");
			builder.setItems(dialoglist, new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) {
					switch (which) {	
					case 0:
						Intent takePictureIntent = new Intent(	MediaStore.ACTION_IMAGE_CAPTURE);
						if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
							startActivityForResult(takePictureIntent,	GlobalConstants.POST_CAMERA);
						}
						dialog.dismiss();
						break;

					case 1:
						Intent i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
						startActivityForResult(i, GlobalConstants.POST_GALLERY);
						dialog.dismiss();
						break;

					case 2:
						dialog.dismiss();
						break;
					}
				}
			});

			dialog = builder.create();
			dialog.show();
			
		} else if(whichAction.equalsIgnoreCase("timeLinePic")) {

			AlertDialog.Builder builder = new AlertDialog.Builder(this);

			builder.setTitle("Choose Action");
			builder.setItems(dialoglist, new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) {
					switch (which) {	
					case 0:
						Intent takePictureIntent = new Intent(	MediaStore.ACTION_IMAGE_CAPTURE);
						if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
							startActivityForResult(takePictureIntent,	GlobalConstants.HEADER_CAMERA);
						}
						dialog.dismiss();
						break;

					case 1:
						Intent i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
						startActivityForResult(i, GlobalConstants.HEADER_GALLERY);
						dialog.dismiss();
						break;

					case 2:
						dialog.dismiss();
						break;
					}
				}
			});

			dialog = builder.create();
			dialog.show();		
		}	
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);

		if (requestCode == GlobalConstants.POST_GALLERY && resultCode == RESULT_OK) {

			// int drigree;
			Uri imageUri = data.getData();

			try {
				// drigree = PhotoUtil.getImageOrientation(imageUri);
				InputStream inputStream = getContentResolver().openInputStream(
						imageUri);

				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inTempStorage = new byte[16 * 1024];
				options.inJustDecodeBounds = true;
				File f = new File(Utils.getRealPathFromURI(this, imageUri));

				if (f.exists()) {
					imageName = "" + f.getName();
					BitmapFactory.decodeStream(new FileInputStream(/*
					 * imageUri.
					 * getPath()
					 */f),
					 null, options);
					int IMAGE_MAX_SIZE = 640;
					int scale = 1;
					if (options.outHeight > IMAGE_MAX_SIZE
							|| options.outWidth > IMAGE_MAX_SIZE) {

						scale = (int) Math.pow(
								2,
								(int) Math.round(Math.log(IMAGE_MAX_SIZE
										/ (double) Math.max(options.outHeight,
												options.outWidth))
												/ Math.log(0.5)));
					}

					// Decode with inSampleSize
					BitmapFactory.Options mOption = new BitmapFactory.Options();
					mOption.inSampleSize = scale;
					mOption.inPurgeable = true;
					mOption.outHeight = 480;
					mOption.outWidth = 640;
					Bitmap b = BitmapFactory.decodeStream(inputStream, null,
							mOption);

					ByteArrayOutputStream stream = new ByteArrayOutputStream();
					b.compress(Bitmap.CompressFormat.JPEG, 60, stream);
					byte[] byte_arr = stream.toByteArray();
					strBase64 = com.runtwo.utils.Base64.encodeBytes(byte_arr);

					imageName = ImageFileManipulation.getFileName()
							+ "_img.png";
					Log.v("galleryImage", imageName);
					Log.e("image length", "" + strBase64.length());

					/*
					 * ByteArrayOutputStream stream = new
					 * ByteArrayOutputStream();
					 * b.compress(Bitmap.CompressFormat.PNG, 90, stream); byte[]
					 * byte_arr = stream.toByteArray(); strBase64 =
					 * Base64.encodeToString(byte_arr, Base64.DEFAULT);
					 */
					// Log.v("strBase64", strBase64);

					try {
						Bitmap bitmap2 = ThumbnailUtils.extractThumbnail(
								new ImageFileManipulation(this).getThumbnail(
										imageUri, 50), 50, 50);
						profileImage.setImageBitmap(bitmap2);
					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					Toast.makeText(this, "Error Getting Image, Try again.",
							Toast.LENGTH_SHORT).show();
				}

				// PhotoUtil.rotate(imageUri, drigree,getActivity());
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (requestCode == GlobalConstants.POST_CAMERA	&& resultCode == RESULT_OK) {

			Bundle extras = data.getExtras();
			Bitmap imageBitmap = (Bitmap) extras.get("data");

			try {

				ByteArrayOutputStream stream = new ByteArrayOutputStream();
				imageBitmap.compress(Bitmap.CompressFormat.JPEG, 60, stream);
				byte[] byte_arr = stream.toByteArray();
				strBase64 = com.runtwo.utils.Base64.encodeBytes(byte_arr);

				imageName = ImageFileManipulation.getFileName() + "_img.png";
				Log.v("cameraImage", imageName);
				profileImage.setImageBitmap(imageBitmap);

				/*
				 * Bitmap scaledBitmap = Utils.scaleDown(imageBitmap,800,true);
				 * ByteArrayOutputStream stream = new ByteArrayOutputStream();
				 * scaledBitmap.compress(Bitmap.CompressFormat.PNG, 90, stream);
				 * byte[] byte_arr = stream.toByteArray(); strBase64 =
				 * Base64.encodeToString(byte_arr,Base64.DEFAULT);
				 */

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (requestCode == GlobalConstants.HEADER_CAMERA	&& resultCode == RESULT_OK) {

			Bundle extras = data.getExtras();
			Bitmap imageBitmap = (Bitmap) extras.get("data");

			try {

				ByteArrayOutputStream stream = new ByteArrayOutputStream();
				imageBitmap.compress(Bitmap.CompressFormat.JPEG, 60, stream);
				byte[] byte_arr = stream.toByteArray();
				strBase64TimeLine = com.runtwo.utils.Base64.encodeBytes(byte_arr);

				timeLineImageName = ImageFileManipulation.getFileName() + "_img.png";
				Log.v("headerCameraImage", timeLineImageName);
				headerImage.setImageBitmap(imageBitmap);

			} catch (Exception e) {
				e.printStackTrace();
			}

		} else if (requestCode == GlobalConstants.HEADER_GALLERY && resultCode == RESULT_OK) {
			Uri imageUri = data.getData();
			try {

				InputStream inputStream = getContentResolver().openInputStream(
						imageUri);
				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inTempStorage = new byte[16 * 1024];
				options.inJustDecodeBounds = true;
				File f = new File(Utils.getRealPathFromURI(this, imageUri));

				if (f.exists()) {
					timeLineImageName = "" + f.getName();
					Log.v("headerGalleryImage", timeLineImageName);
					BitmapFactory.decodeStream(new FileInputStream(f), null,
							options);
					int IMAGE_MAX_SIZE = 640;
					int scale = 1;
					if (options.outHeight > IMAGE_MAX_SIZE
							|| options.outWidth > IMAGE_MAX_SIZE) {

						scale = (int) Math.pow(
								2,
								(int) Math.round(Math.log(IMAGE_MAX_SIZE
										/ (double) Math.max(options.outHeight,
												options.outWidth))
												/ Math.log(0.5)));
					}

					// Decode with inSampleSize
					BitmapFactory.Options mOption = new BitmapFactory.Options();
					mOption.inSampleSize = scale;
					mOption.inPurgeable = true;
					mOption.outHeight = 480;
					mOption.outWidth = 640;
					Bitmap b = BitmapFactory.decodeStream(inputStream, null,
							mOption);

					ByteArrayOutputStream stream = new ByteArrayOutputStream();
					b.compress(Bitmap.CompressFormat.JPEG, 60, stream);
					byte[] byte_arr = stream.toByteArray();
					strBase64TimeLine = com.runtwo.utils.Base64.encodeBytes(byte_arr);

					timeLineImageName = ImageFileManipulation.getFileName()
							+ "_img.png";
					Log.v("headerGalleryImage", imageName);
					Log.e("timeline image length", "" + strBase64TimeLine.length());

					try {
						Bitmap bitmap2 = ThumbnailUtils.extractThumbnail(
								new ImageFileManipulation(this).getThumbnail(
										imageUri, 50), 50, 50);
						headerImage.setImageBitmap(bitmap2);
					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					Toast.makeText(this, "Error Getting Image, Try again.",
							Toast.LENGTH_SHORT).show();
				}
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

}
